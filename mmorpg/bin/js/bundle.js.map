{
  "version": 3,
  "sources": ["../../src/Enum.ts", "../../src/actor/ActorType.ts", "../../src/property/ActorProperty.ts", "../../src/property/ActorPropertyType.ts", "../../src/property/ActorPropertyManager.ts", "../../src/data/ActionTable.ts", "../../src/data/ActionContainer.ts", "../../src/data/ActorTable.ts", "../../src/data/ActorContainer.ts", "../../src/data/DataManager.ts", "../../src/data/DataFactory.ts", "../../src/actor/ActorBase.ts", "../../src/core/StateMachine.ts", "../../src/Utils.ts", "../../src/actor/animation/AnimationController.ts", "../../src/GameConfig.ts", "../../src/scene/MapGrid.ts", "../../src/scene/MapTile.ts", "../../src/scene/WorldMap.ts", "../../src/scene/Camera2D.ts", "../../src/scene/SceneManager.ts", "../../src/actor/DisplayObjectController.ts", "../../src/actor/Actor.ts", "../../src/core/State.ts", "../../src/actor/state/ActorStateBase.ts", "../../src/actor/state/ActorIdleState.ts", "../../src/actor/state/ActorMoveState.ts", "../../src/actor/state/ActorSkillState.ts", "../../src/actor/Player.ts", "../../src/InputManager.ts", "../../src/App.ts", "../../src/Main.ts"],
  "sourcesContent": ["export enum LayerEnum {\r\n    MapLayer,\r\n    ActorLayer,\r\n    EffectLayer\r\n}\r\n\r\nexport enum ActorState{\r\n    IDLE = \"idle\",\r\n    Move = \"move\",\r\n    FLY = \"fly\",\r\n    SKILL = \"skill\",\r\n    Dead = \"dead\",\r\n\r\n}", "export enum ActorType{\r\n    PLAYER,\r\n    MONSTER,\r\n    NPC\r\n}\r\n\r\nexport enum ActorCamp{\r\n    PLAYER,\r\n    ENEMY,\r\n    NEUTRAL\r\n}", "import { ActorPropertyType } from \"./ActorPropertyType\";\r\n\r\nexport default class ActorProperty {\r\n    hp: number;\r\n    speed: number;\r\n    private _propertiesMap: Map<ActorPropertyType, number> = new Map();\r\n    constructor() {\r\n\r\n    }\r\n\r\n\r\n    getProperty(type: ActorPropertyType): number {\r\n        if (this._propertiesMap.has(type)) {\r\n            return this._propertiesMap.get(type);\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    changeProperty(type: ActorPropertyType, value: number): void {\r\n        let old = this.getProperty(type);\r\n        value += old;\r\n        this.setProperty(type,value);\r\n    }\r\n\r\n    setProperty(type: ActorPropertyType, value: number){\r\n        this._propertiesMap.set(type,value);\r\n    }\r\n\r\n    clear():void{\r\n        this._propertiesMap.clear();\r\n    }\r\n\r\n}", "export enum ActorPropertyType {\r\n    HP,\r\n    Speed,\r\n    FlySpeed,\r\n    Atk\r\n}", "import Actor from \"../actor/Actor\";\r\nimport ActorProperty from \"./ActorProperty\";\r\nimport { ActorPropertyType } from \"./ActorPropertyType\";\r\n\r\nexport default class ActorPropertyManager {\r\n    private _owner: Actor;\r\n    protected _baseProperty: ActorProperty;\r\n    protected _deltaProperty: ActorProperty;\r\n\r\n    public constructor(owner: Actor) {\r\n        this._owner = owner;\r\n        this._baseProperty = new ActorProperty();\r\n        this._deltaProperty = new ActorProperty();\r\n        this.clear();\r\n    }\r\n\r\n    public getBaseProperty(type: ActorPropertyType): number {\r\n        return this._baseProperty[type];\r\n    }\r\n\r\n    public setBaseProperty(type: ActorPropertyType,value:number): void {\r\n        this._baseProperty.setProperty(type,value);\r\n    }\r\n\r\n    public getProperty(type:number):number{\r\n        let max = this._baseProperty.getProperty(type);\r\n        let delta = this._deltaProperty.getProperty(type);\r\n        return max + delta;\r\n    }\r\n\r\n    public changeProperty(type:ActorPropertyType,value:number){\r\n        let max = this.getProperty(type) + value\r\n        if (max>this.getBaseProperty(type)){\r\n            this._deltaProperty.setProperty(type,0);\r\n        }else if(max<=0){\r\n            this._deltaProperty.setProperty(type, -this.getBaseProperty(type));\r\n        } else {\r\n            this._deltaProperty.setProperty(type, value);\r\n        }\r\n    }\r\n\r\n    public clear():void{\r\n        for (let i = 0; i < Object.keys(ActorPropertyType).length; i++) {\r\n            this._baseProperty.setProperty(i, 0);\r\n            this._deltaProperty.setProperty(i, 0);\r\n        }\r\n    }\r\n\r\n}", "export default class ActionTable {\r\n    public ownerId:number;\r\n    public actionId:number;\r\n    public name:string;\r\n    public start:number;\r\n    public end:number;\r\n    public keyFrame:string;\r\n    public isLoop:boolean;\r\n}", "import { ActorState } from \"../Enum\";\r\nimport ActionTable from \"./ActionTable\";\r\n\r\nexport default class ActionContainer{\r\n    private _actionMap: Map<number, ActionTable> = new Map();\r\n    public get actionMap(): Map<number, ActionTable> {\r\n        return this._actionMap;\r\n    }\r\n    public constructor(){\r\n        let action: ActionTable = new ActionTable();\r\n        action.ownerId = 1000;\r\n        action.actionId = 10000;\r\n        action.name = ActorState.IDLE;\r\n        action.isLoop = true;\r\n        this._actionMap.set(action.actionId, action);\r\n    }\r\n\r\n    public getActionById(id:number):ActionTable{\r\n        if(this._actionMap.has(id)){\r\n            return this._actionMap.get(id);\r\n        }else{\r\n            console.warn(\"can't not find action by id:\" + id);\r\n            return null;\r\n        }\r\n    }\r\n}", "export default class ActorTable{\r\n    public id:number;\r\n    public name:string;\r\n    public hp:number;\r\n    public atk:number;\r\n    public file2d:string;\r\n    public file3d:string;\r\n    public fileAni:string;\r\n    public meshName:string;\r\n}", "import ActorTable from \"./ActorTable\";\r\n\r\nexport default class ActorContainer{\r\n    private _actorMap: Map<number,ActorTable> = new Map();\r\n    public get actorMap(): Map<number, ActorTable>{\r\n        return this._actorMap;\r\n    }\r\n    public constructor(){\r\n        let a1:ActorTable = new ActorTable();\r\n        a1.id = 1000;\r\n        a1.hp = 10000;\r\n        a1.atk = 20;\r\n        a1.file2d = \"./res/player.png\";\r\n        a1.file3d = \"./res/3dScene/cike/Conventional/cike.lh\";\r\n        this._actorMap.set(a1.id,a1);\r\n    }\r\n\r\n    public getActorById(id:number):ActorTable{\r\n        if(this._actorMap.has(id)){\r\n            return this._actorMap.get(id);\r\n        }else{\r\n            console.warn(\"can't not find actor by id:\" + id);\r\n            return null;\r\n        }\r\n    }\r\n}", "import ActionContainer from \"./ActionContainer\";\r\nimport ActorContainer from \"./ActorContainer\";\r\n\r\nexport default class DataManager {\r\n    public actorContainer: ActorContainer = new ActorContainer();\r\n    public actionContainer: ActionContainer = new ActionContainer();\r\n    private static _ins: DataManager;\r\n    public static get ins(): DataManager {\r\n        if (this._ins == null) {\r\n            this._ins = new DataManager();\r\n        }\r\n        return this._ins;\r\n    }\r\n\r\n    private constructor() {\r\n        if (DataManager._ins) {\r\n            throw \"singleton class is not use new constructor!\";\r\n        }\r\n    }\r\n\r\n}", "import ActionTable from \"./ActionTable\";\r\nimport ActorTable from \"./ActorTable\";\r\nimport DataManager from \"./DataManager\";\r\nimport Actor from \"../actor/Actor\";\r\n\r\nexport default class DataFactory {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    static getActionById(id: number): ActionTable {\r\n        let action = DataManager.ins.actionContainer.getActionById(id);\r\n        if (action == null) {\r\n            console.warn(\"\u627E\u4E0D\u5230\u6A21\u677F\u6570\u636E\uFF1A\" + id);\r\n        }\r\n        return action;\r\n    }\r\n\r\n    static getActorById(id: number): ActorTable {\r\n        let actor = DataManager.ins.actorContainer.getActorById(id);\r\n        if (actor == null) {\r\n            console.warn(\"\u627E\u4E0D\u5230\u89D2\u8272\u6A21\u677F\u6570\u636E\uFF1A\" + id);\r\n        }\r\n        return actor;\r\n    }\r\n\r\n    static getActionData(ownerId: number): ActionTable[] {\r\n        let res: ActionTable[] = [];\r\n        let dict = DataManager.ins.actionContainer.actionMap;\r\n        for (let key in dict) {\r\n            if (dict[key].ownerId == ownerId) {\r\n                res.push(dict[key]);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}", "import ActorTable from \"../data/ActorTable\";\r\nimport DataManager from \"../data/DataManager\";\r\nimport ActorProperty from \"../property/ActorProperty\";\r\nimport ActorPropertyManager from \"../property/ActorPropertyManager\";\r\nimport { ActorCamp, ActorType } from \"./ActorType\";\r\nimport DataFactory from \"../data/DataFactory\";\r\n\r\nexport default class ActorBase {\r\n    protected _templateId:number;\r\n    protected _templateData:ActorTable;\r\n    public get templateData():ActorTable{\r\n        return this._templateData;\r\n    }\r\n    protected _type: ActorType;\r\n    public get type(): ActorType {\r\n        return this._type;\r\n    }\r\n    protected _camp: ActorCamp;\r\n    public get camp(): ActorCamp {\r\n        return this._camp;\r\n    }\r\n    constructor(templateId:number,type: ActorType, camp: ActorCamp) {\r\n        this._type = type;\r\n        this._camp = camp;\r\n        this._templateId = templateId;\r\n        this._templateData = DataFactory.getActorById(templateId);\r\n        }\r\n\r\n    public isActorType(type: ActorType): boolean {\r\n        return this._type == type;\r\n    }\r\n\r\n    public isActorCamp(camp: ActorCamp): boolean {\r\n        return this._camp == camp;\r\n    }\r\n}\r\n", "import Actor from \"../actor/Actor\";\r\nimport State from \"./State\"\r\n\r\nexport default class StateMachine {\r\n    public static InvalidState: string = \"InvalidState\"\r\n    protected _owner: Object;\r\n    public get owner(): Object {\r\n        return this._owner;\r\n    }\r\n    public set owner(val: Object) {\r\n        this._owner = val;\r\n    }\r\n    protected _stateDic: Map<string, State> = new Map();\r\n    protected _currentState: State;\r\n    protected _lastState: State;\r\n    constructor(owner:Actor) {\r\n        this.owner = owner;\r\n    }\r\n\r\n    registerState(stateKey: string, state: State): void {\r\n        if(this._owner != state.owner){\r\n            return;\r\n        }\r\n        this._stateDic.set(stateKey,state);\r\n    }\r\n\r\n    isExit(stateKey: string): boolean {\r\n        return this._stateDic.has(stateKey);\r\n    }\r\n\r\n    changeState(key:string,obj:Object):void{\r\n        let newState = this._stateDic.get(key);\r\n        if (!newState){\r\n            return;\r\n        }\r\n        if (this._currentState){\r\n            this._currentState.onLeave(newState.getStateKey());\r\n        }\r\n        this._currentState = newState;\r\n        this._currentState.onEnter(obj);\r\n    }\r\n\r\n    update():void{\r\n        if(this._currentState!=null){\r\n            this._currentState.onUpdate();\r\n        }\r\n    }\r\n\r\n    getCurrentState():string{\r\n        if(this._currentState){\r\n            return this._currentState.getStateKey();\r\n        }\r\n        return StateMachine.InvalidState;\r\n    }\r\n\r\n    clear(){\r\n        if(this._currentState){\r\n            this._currentState.onLeave(StateMachine.InvalidState)\r\n        }\r\n        this._stateDic.clear();\r\n        this._currentState = null;\r\n    }\r\n}", "export const angleToRandin = (angle: number): number => {\r\n    return angle * Math.PI / 180;\r\n}\r\n\r\nexport const randinToAngle = (randin: number): number => {\r\n    return randin * 180 / Math.PI;\r\n}\r\n\r\nexport const isNullOrEmpty = (str: string): boolean => {\r\n    if (str != null) {\r\n        str = str.trim();\r\n        if(str.length>0){\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const splitStrToIntArr = (str:string,splitStr = \"+\"):Array<number> =>{\r\n    let arr: Array<string> = str.split(splitStr);\r\n    return arr.map((item)=>{\r\n        return +item;\r\n    })\r\n}", "import ActorBase from \"../ActorBase\";\r\nimport DataFactory from \"../../data/DataFactory\";\r\nimport { isNullOrEmpty, splitStrToIntArr } from \"../../Utils\";\r\n\r\nexport default class AnimationController {\r\n    private _animator: Laya.Animator;\r\n    private _completeHandler: Laya.Handler;\r\n    private _keyframeHandler: Laya.Handler;\r\n    private _isPlaying: boolean;\r\n    private _actionMap: Map<string, number>;\r\n    private _keyFrames: Array<number>;\r\n    constructor(animator: Laya.Animator, actionMap: Map<string, number>) {\r\n        this._animator = animator;\r\n        this._actionMap = actionMap;\r\n\r\n    }\r\n\r\n    playAni(name: string, isLoop: boolean = false, completeHandler: Laya.Handler = null) {\r\n        if (this._animator) {\r\n            // let count = isLoop ? Number.MAX_VALUE : 0;\r\n            this._completeHandler = completeHandler;\r\n            // this._keyframeHandler = keyframeHandler;\r\n            // this._keyframe = keyframe;\r\n            // // this._animator\r\n\r\n            // let state = new Laya.AnimatorState();\r\n            // //\u8BBE\u7F6E\u52A8\u4F5C\u72B6\u6001\u7684\u540D\u79F0\r\n            // state.name = name;\r\n            // //\u8BBE\u7F6E\u52A8\u4F5C\u72B6\u6001\u64AD\u653E\u7684\u8D77\u59CB\u65F6\u95F4\uFF08\u8D77\u59CB\u65F6\u95F4\u4E0E\u7ED3\u675F\u65F6\u95F4\u7684\u8BBE\u7F6E\u4E3A0-1\u7684\u767E\u5206\u6BD4\u6570\u503C\uFF09  \u8981\u622A\u53D6\u7684\u65F6\u95F4\u70B9 / \u52A8\u753B\u7684\u603B\u65F6\u957F\r\n            // state.clipStart = 10 / 40;\r\n            // //\u8BBE\u7F6E\u52A8\u4F5C\u72B6\u6001\u64AD\u653E\u7684\u7ED3\u675F\u65F6\u95F4\r\n            // state.clipEnd = 20 / 40;\r\n            // //\u5F97\u5230\u9ED8\u8BA4\u52A8\u753B\u8D4B\u503C\u7ED9Clip\uFF08getDefaultState\u9ED8\u8BA4\u52A8\u753B\u4E3AUnity\u4E2Danimation\u7684\u6570\u7EC4\u987A\u5E8F0\u4E0B\u6807\u7684\u52A8\u753B\uFF09\r\n            // state.clip = this._animator.getDefaultState().clip;\r\n            // //\u52A8\u753B\u64AD\u653E\u662F\u5426\u5FAA\u73AF\r\n            // state.clip.islooping = isLoop;\r\n            // //\u6DFB\u52A0\u52A8\u753B\u72B6\u6001\u5230\u52A8\u753B\u7EC4\u4EF6\u91CC\r\n            // this._animator.addState(state);\r\n            //\u64AD\u653E\u52A8\u753B\r\n            this._animator.play(name);\r\n            Laya.timer.frameLoop(1, this, () => {\r\n                if (this._animator.getControllerLayer(0).getCurrentPlayState().normalizedTime >= 1) {\r\n                    this.onAniFinish();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    playAniById(actionId: number, keyframeHandler: Laya.Handler = null, completeHandler: Laya.Handler = null) {\r\n        let action = DataFactory.getActionById(actionId);\r\n        if (action) {\r\n            this._isPlaying = true;\r\n            let keyframe = action.keyFrame;\r\n            if (isNullOrEmpty(keyframe)) {\r\n                this._keyFrames = splitStrToIntArr(keyframe);\r\n            }\r\n            this._animator.play(action.name);\r\n            this._completeHandler = completeHandler;\r\n            Laya.timer.frameLoop(1, this, () => {\r\n                if (this._animator.getControllerLayer(0).getCurrentPlayState().normalizedTime >= 1) {\r\n                    this.onAniFinish();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    playAniByState(state: string, keyframeHandler: Laya.Handler = null, completeHandler: Laya.Handler = null) {\r\n        let actionId: number = this._actionMap.get(state);\r\n        if (actionId) {\r\n            this.playAniById(actionId, keyframeHandler, completeHandler);\r\n        } else {\r\n            console.warn(\"can't find actionId for: \" + state);\r\n        }\r\n    }\r\n\r\n    private onAniFinish(): void {\r\n        if (this._completeHandler) {\r\n            this._completeHandler.run();\r\n            // this._completeHandler.recover();\r\n            this._completeHandler = null;\r\n        }\r\n    }\r\n\r\n    private stop(): void {\r\n        this._keyframeHandler = null;\r\n        this._completeHandler = null;\r\n    }\r\n\r\n    public update(): void {\r\n        if (this._isPlaying) {\r\n            if (this._keyframeHandler) {\r\n                this._keyframeHandler.run();\r\n                this._keyframeHandler = null;\r\n            }\r\n        }\r\n    }\r\n\r\n}", "/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */\r\n/*\r\n* \u6E38\u620F\u521D\u59CB\u5316\u914D\u7F6E;\r\n*/\r\nexport default class GameConfig{\r\n    static width:number=750;\r\n    static height:number=1334;\r\n    static scaleMode:string=\"noscale\";\r\n    static screenMode:string=\"none\";\r\n    static alignV:string=\"top\";\r\n    static alignH:string=\"left\";\r\n    static startScene:any=\"test/TestScene.scene\";\r\n    static sceneRoot:string=\"\";\r\n    static debug:boolean=false;\r\n    static stat:boolean=false;\r\n    static physicsDebug:boolean=false;\r\n    static exportSceneToJson:boolean=true;\r\n    constructor(){}\r\n    static init(){\r\n        var reg: Function = Laya.ClassUtils.regClass;\r\n    }\r\n}\r\nGameConfig.init();", "export default class MapGrid {\r\n    public gridWidth: number = 6000;\r\n    public gridHeight: number = 6000;\r\n    public cellWidth: number = 300;\r\n    public cellHeight: number = 300;\r\n\r\n    public col: number = 20;\r\n    public row: number = 20;\r\n}", "export default class MapTile {\r\n    private _row: number;\r\n    private _col: number;\r\n    private _resUrl: string;\r\n    private _isLoaded: boolean = false;\r\n    private _isLoading: boolean = false;\r\n    private _displayobject: Laya.Sprite;\r\n    private _parent: Laya.Sprite;\r\n    constructor(row: number, col: number, parent: Laya.Sprite) {\r\n        this._row = row;\r\n        this._col = col;\r\n        this._parent = parent;\r\n        this._resUrl = `./res/map_001/${this._row}_${this._col}.jpg`;\r\n        this._displayobject = new Laya.Sprite();\r\n    }\r\n\r\n    private _handler:Laya.Handler;\r\n    loadTile(): void {\r\n        this._handler = Laya.Handler.create(this, this.onLoaded);\r\n        this._isLoading = true;\r\n        Laya.loader.load(this._resUrl, this._handler);\r\n    }\r\n\r\n    onLoaded() {\r\n        if (this._handler){\r\n            this._handler.recover();\r\n        }\r\n        this._isLoaded = true;\r\n        this._isLoading = false;\r\n        let texture = Laya.loader.getRes(this._resUrl);\r\n        this._displayobject.graphics.drawTexture(texture,0,0);\r\n        this._displayobject.x = this._col * 300;\r\n        this._displayobject.y = this._row * 300;\r\n        this._parent.addChild(this._displayobject);\r\n    }\r\n\r\n    unLoadTile(): void {\r\n        this._displayobject.graphics.clear();\r\n        if(this._isLoading){\r\n            Laya.loader.cancelLoadByUrl(this._resUrl);\r\n            this._isLoading =false;\r\n        }else{\r\n            Laya.loader.clearRes(this._resUrl)\r\n        }\r\n        this._isLoaded = false;\r\n        this._parent.removeChild(this._displayobject);\r\n    }\r\n}", "import GameConfig from \"../GameConfig\";\r\nimport MapGrid from \"./MapGrid\";\r\nimport MapTile from \"./MapTile\";\r\nimport SceneManager from \"./SceneManager\";\r\n\r\nexport default class WorldMap {\r\n    private _container: Laya.Sprite = new Laya.Sprite();\r\n    get container(): Laya.Sprite {\r\n        return this._container;\r\n    }\r\n    private _grid: MapGrid = new MapGrid();\r\n    public get grid(): MapGrid {\r\n        return this._grid;\r\n    }\r\n    private _gridTiles: MapTile[][] = [];\r\n    public get gridTiles(): MapTile[][] {\r\n        return this._gridTiles;\r\n    }\r\n\r\n    private static _ins: WorldMap;\r\n    public static get ins(): WorldMap {\r\n        if (this._ins == null) {\r\n            this._ins = new WorldMap();\r\n        }\r\n        return this._ins;\r\n    }\r\n\r\n    private constructor() {\r\n        if (WorldMap._ins) {\r\n            throw \"singleton class is not use new constructor!\";\r\n        }\r\n        this.init();\r\n    }\r\n\r\n    public init(): void {\r\n        this._createTiles();\r\n    }\r\n\r\n    private _createTiles() {\r\n        for (let col = 0; col < this._grid.col; col++) {\r\n            this._gridTiles[col] = [];\r\n            for (let row = 0; row < this._grid.row; row++) {\r\n                this._gridTiles[col][row] = new MapTile(row, col, this._container);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getNeedLoadTile(x: number, y: number): { [key: string]: string } {\r\n        let cellWidth = this.grid.cellWidth;\r\n        let cellHeight = this.grid.cellHeight;\r\n        if (y < cellHeight){\r\n            debugger;\r\n        }\r\n        let rect = new Laya.Rectangle(x - cellWidth, y - cellHeight, GameConfig.width + cellWidth, GameConfig.height + cellHeight);\r\n        \r\n        let p1: Laya.Point = this.scenePosToGrid(rect.x, rect.y);\r\n        let p2: Laya.Point = this.scenePosToGrid(rect.right, rect.bottom); // needload\r\n        let loadMap: { [key: string]: string } = {};\r\n        for (let i = p1.x; i <= p2.x; i++) {\r\n            for (let j = p1.y; j <= p2.y; j++) {\r\n                let item = `${i}_${j}`;\r\n                loadMap[item] = item;\r\n            }\r\n        }\r\n        return loadMap;\r\n    }\r\n\r\n    public scenePosToGrid(x: number, y: number): Laya.Point {\r\n        let p = new Laya.Point();\r\n        p.x = Math.floor(x / this._grid.cellWidth);\r\n        p.y = Math.floor(y / this._grid.cellHeight);\r\n        return p;\r\n    }\r\n\r\n    private _loadedTile: { [key: string]: string } = {};\r\n    public loadTiles(tiles: { [key: string]: string }) {\r\n        let col: number, row: number, idxArr: string[];\r\n\r\n        // unload\r\n        for (let key in this._loadedTile){\r\n            if(!tiles[key]){\r\n                idxArr = key.split(\"_\");\r\n                col = +idxArr[0];\r\n                row = +idxArr[1];\r\n                this._gridTiles[col][row].unLoadTile();\r\n                delete this._loadedTile[key];\r\n            }\r\n        }\r\n\r\n        for (let key in tiles) {\r\n            idxArr = key.split(\"_\");\r\n            col = +idxArr[0];\r\n            row = +idxArr[1];\r\n            if (!this._loadedTile[key]) {\r\n                if (col < this.grid.col && row < this.grid.row) {\r\n                    this._gridTiles[col][row].loadTile();\r\n                    this._loadedTile[key] = key;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public update(){\r\n        let cameraView = SceneManager.ins.camera2d.cameraView;\r\n        let tiles = this.getNeedLoadTile(cameraView.x,cameraView.y);\r\n        this.loadTiles(tiles);\r\n    }\r\n\r\n}", "import GameConfig from \"../GameConfig\";\r\nimport WorldMap from \"./WorldMap\";\r\n\r\nexport default class Camera2D {\r\n    private _cameraView: Laya.Rectangle;\r\n    private _scene: Laya.Sprite;\r\n    public get cameraView(): Laya.Rectangle {\r\n        return this._cameraView;\r\n    }\r\n\r\n    constructor(scene: Laya.Sprite) {\r\n        this._scene = scene;\r\n        this._cameraView = new Laya.Rectangle(0, 0, GameConfig.width, GameConfig.height);\r\n        this._scene.scrollRect = this.cameraView;\r\n    }\r\n\r\n    private _focusTarget: Laya.Sprite;\r\n    public focus(target: Laya.Sprite): void {\r\n        this._focusTarget = target;\r\n        this._cameraView.x = this._focusTarget.x - (GameConfig.width >> 1);\r\n        this._cameraView.y = this._focusTarget.y - (GameConfig.height >> 1);\r\n    }\r\n\r\n    private _targetPos: Laya.Point = new Laya.Point();\r\n    private _ease: number = 0.0025;\r\n    public update(): void {\r\n        if (this._focusTarget) {\r\n            let halfWidth = GameConfig.width >> 1,\r\n                halfHeight = GameConfig.height >> 1;\r\n            this._targetPos.x = this._focusTarget.x - halfWidth;\r\n            this._targetPos.y = this._focusTarget.y - halfHeight;\r\n\r\n            if (this._focusTarget.x + halfWidth < WorldMap.ins.grid.gridWidth &&\r\n                this._focusTarget.x - halfWidth > 0) {\r\n                this._cameraView.x += (this._targetPos.x - this._cameraView.x) * Laya.timer.delta * this._ease;\r\n            }\r\n            if (this._focusTarget.y + halfHeight < WorldMap.ins.grid.gridHeight &&\r\n                this._focusTarget.y - halfHeight > 0) {\r\n                this._cameraView.y += (this._targetPos.y - this._cameraView.y) * Laya.timer.delta * this._ease;\r\n            }\r\n        }\r\n    }\r\n}", "import Camera2D from \"./Camera2D\";\r\nimport { LayerEnum } from \"../Enum\";\r\nimport GameConfig from \"../GameConfig\";\r\nimport { angleToRandin } from \"../Utils\";\r\nimport WorldMap from \"./WorldMap\";\r\n\r\nexport default class SceneManager {\r\n    private static _ins: SceneManager;\r\n    public static get ins(): SceneManager {\r\n        if (this._ins == null) {\r\n            this._ins = new SceneManager();\r\n        }\r\n        return this._ins;\r\n    }\r\n\r\n    private constructor() {\r\n        if (SceneManager._ins) {\r\n            throw \"singleton class is not use new constructor!\";\r\n        }\r\n    }\r\n\r\n    private _scene: Laya.Sprite;\r\n    public get scene(): Laya.Sprite {\r\n        return this._scene;\r\n    }\r\n    private _scene3d: Laya.Scene3D;\r\n    private _layerMap: Laya.Sprite;\r\n    public get scene3d(): Laya.Sprite {\r\n        return this._scene3d;\r\n    }\r\n    private _layerActor: Laya.Sprite;\r\n    private _layerEffect: Laya.Sprite;\r\n    private _layerDic: Map<LayerEnum, Laya.Sprite> = new Map();\r\n    private _camera2d: Camera2D;\r\n    private _camera3d: Laya.Camera;\r\n    public get camera3d():Laya.Camera{\r\n        return this._camera3d;\r\n    }\r\n    private _container3d: Laya.Sprite3D = new Laya.Sprite3D();\r\n    public get container3d(): Laya.Sprite3D{\r\n        return this._container3d;\r\n    }\r\n    get camera2d(): Camera2D {\r\n        return this._camera2d;\r\n    }\r\n\r\n    public init(): void {\r\n        this.init2d();\r\n        this.init3d();\r\n    }\r\n\r\n    public init2d(): void {\r\n        this._layerMap = new Laya.Sprite();\r\n        this._layerMap.name = \"layerMap\";\r\n        this._layerActor = new Laya.Sprite();\r\n        this._layerActor.name = \"layerActor\";\r\n        this._layerEffect = new Laya.Sprite();\r\n        this._layerEffect.name = \"layerEffect\";\r\n        this._scene = new Laya.Sprite();\r\n        this._scene.name = \"scene\";\r\n        this._camera2d = new Camera2D(this._scene);\r\n\r\n        this._scene.addChild(this._layerMap);\r\n        this._scene.addChild(this._layerActor);\r\n        this._scene.addChild(this._layerEffect);\r\n\r\n        this._layerDic.set(LayerEnum.MapLayer, this._layerMap);\r\n        this._layerDic.set(LayerEnum.ActorLayer, this._layerActor);\r\n        this._layerDic.set(LayerEnum.EffectLayer, this._layerEffect);\r\n\r\n        Laya.stage.addChild(this._scene);\r\n    }\r\n\r\n    public init3d(): void {\r\n        this._scene3d = Laya.stage.addChild(new Laya.Scene3D()) as Laya.Scene3D;\r\n        this._scene3d.addChild(this._container3d);\r\n        this._container3d.transform.rotationEuler = new Laya.Vector3(angleToRandin(30));\r\n        this._camera3d = new Laya.Camera(10, 0.1, 300);\r\n        this._scene3d.addChild(this._camera3d);\r\n        this._camera3d.transform.translate(new Laya.Vector3(0, 0, 150));\r\n        this._camera3d.orthographic = true;\r\n        this._camera3d.orthographicVerticalSize = 10;\r\n        this._camera3d.clearFlag = Laya.CameraClearFlags.SolidColor;\r\n        this._camera3d.clearColor = new Laya.Vector4(0.0, 0.0, 0.0, 0.0);\r\n        var renderTexture = new Laya.RenderTexture(GameConfig.width, GameConfig.height, Laya.RenderTextureFormat.R8G8B8A8, Laya.RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\r\n        this._camera3d.renderTarget = renderTexture;\r\n        this._camera3d.orthographicVerticalSize = 10;\r\n        this._camera3d.aspectRatio = 0;\r\n        var scene3DImage = new Laya.Image();\r\n        scene3DImage.source = new Laya.Texture(renderTexture);\r\n        Laya.stage.addChild(scene3DImage);\r\n\r\n        // Laya.Sprite3D.load(\"./res/3dScene/cike/Conventional/Main Camera.lh\",\r\n        //     Laya.Handler.create(this, (camera: Laya.Sprite3D) => {\r\n        //         this._camera3d = this._scene3d.addChild(camera) as Laya.Camera;\r\n        //         var renderTexture = new Laya.RenderTexture(512, 512, Laya.RenderTextureFormat.R8G8B8A8, Laya.RenderTextureDepthFormat.DEPTHSTENCIL_NONE);\r\n        //         this._camera3d.renderTarget = renderTexture;\r\n                // this._camera3d.clearFlag =Laya.BaseCamera.CLEARFLAG_SOLIDCOLOR;    \r\n                // this._camera3d.clearColor = new Laya.Vector4(0, 0, 0, 0);\r\n                // console.log(this._camera3d.clearColor);\r\n            // }))\r\n\r\n        // Laya.Sprite3D.load(\"./res/3dScene/cike/Conventional/cike.lh\", Laya.Handler.create(this, (sprite: Laya.Sprite3D) => {\r\n        //     Laya.Sprite3D.load(\"./res/3dScene/cike/Conventional/Main Camera.lh\",\r\n        //         Laya.Handler.create(this, (camera: Laya.Sprite3D) => {\r\n        //             this._camera3d = this._scene3d.addChild(camera) as Laya.Camera;\r\n        //             // sprite.transform.rotate(new Laya.Vector3(0, 180, 0), true, false);\r\n        //             this._scene3d.addChild(sprite);\r\n        //         }))\r\n        // }))\r\n    }\r\n\r\n    public addToLayer(sprite: Laya.Sprite, layer: LayerEnum, x: number = 0, y: number = 0) {\r\n        let layerSprite = this._layerDic.get(layer);\r\n        if (layerSprite) {\r\n            layerSprite.addChild(sprite);\r\n            sprite.x = x;\r\n            sprite.y = y;\r\n        } else {\r\n            console.warn(\"can't find layer: \" + layer);\r\n        }\r\n    }\r\n\r\n    getMousePos(): Laya.Point {\r\n        if (this._scene) {\r\n            return new Laya.Point(this._scene.mouseX, this._scene.mouseY);\r\n        } else {\r\n            return new Laya.Point();\r\n        }\r\n    }\r\n\r\n    update() {\r\n        if (this._camera2d) {\r\n            this._camera2d.update();\r\n        }\r\n        WorldMap.ins.update();\r\n    }\r\n}", "import AnimationController from \"./animation/AnimationController\";\r\nimport SceneManager from \"../scene/SceneManager\";\r\nimport Actor from \"./Actor\";\r\n\r\nexport default class DisplayObjectController {\r\n    protected _owner: Actor; \r\n    private _displayerObject: Laya.Sprite;\r\n    public get displayObject(): Laya.Sprite {\r\n        return this._displayerObject;\r\n    };\r\n    protected _displayerObject3d: Laya.Sprite3D;\r\n    protected _animationController: AnimationController;\r\n    public get animationController(): AnimationController{\r\n        return this._animationController;\r\n    }\r\n\r\n    private _is3dObjLoaded:boolean = false;\r\n    public get is3dObjLoaded():boolean{\r\n        return this._is3dObjLoaded;\r\n    }\r\n    constructor(owner: Actor) {\r\n        this._owner = owner;\r\n        this.create2dObj();\r\n        this.create3dObj();\r\n    }\r\n\r\n    create2dObj():void{\r\n        this._displayerObject = new Laya.Sprite();\r\n        // let child = Laya.Sprite.fromImage(\"./res/player.png\");\r\n        let child = Laya.Sprite.fromImage(this._owner.templateData.file2d);\r\n        this.displayObject.addChild(child);\r\n        child.x -= 48;\r\n        child.y -= 48;\r\n\r\n        // this.create3dObject();\r\n    }\r\n\r\n    create3dObj(): void {\r\n        Laya.Sprite3D.load(this._owner.templateData.file3d, Laya.Handler.create(this, (sprite: Laya.Sprite3D) => {\r\n            this._is3dObjLoaded = true;\r\n            this._displayerObject3d = SceneManager.ins.container3d.addChild(sprite) as Laya.Sprite3D;\r\n            this._displayerObject3d.transform.rotate(new Laya.Vector3(0, 180, 0), true, false);\r\n            this._displayerObject3d.transform.localScale = new Laya.Vector3(0.05, 0.05, 0.05);\r\n            // let mesh = sprite.getChildByName(\"mod_CiKeZhuangBei_Body_03\") as Laya.MeshSprite3D;\r\n            let animator = sprite.getComponent(Laya.Animator) as Laya.Animator;\r\n            this._animationController = new AnimationController(animator,this._owner.actionMap);\r\n            // animator.play(\"daiji\");\r\n        }))\r\n\r\n    }\r\n\r\n    update(){\r\n        if (this._animationController) {\r\n            this._animationController.update();\r\n        }\r\n        if (this._displayerObject3d) {\r\n            let pos = this.getGlobalVec3()\r\n            let transform = new Laya.Vector3();\r\n            SceneManager.ins.camera3d.convertScreenCoordToOrthographicCoord(pos, transform);\r\n            // screenCoordTo3DCoord(pos, transform,GameConfig.width,GameConfig.height);\r\n            this._displayerObject3d.transform.position = transform;\r\n        }\r\n    }\r\n\r\n    public getGlobalVec3(): Laya.Vector3 {\r\n        let pos = new Laya.Vector3();\r\n        let point = SceneManager.ins.scene.localToGlobal(new Laya.Point(this._displayerObject.x, this._displayerObject.y));\r\n        pos.x = point.x;\r\n        pos.y = point.y;\r\n        return pos;\r\n    }\r\n\r\n    private _moveTween: Laya.Tween;\r\n    moveTo(position: Laya.Point) {\r\n        if (this._moveTween) {\r\n            this._moveTween.clear();\r\n        }\r\n        this._moveTween = Laya.Tween.to(this._displayerObject, {\r\n            x: position.x,\r\n            y: position.y,\r\n        }, 1000);\r\n    }\r\n}", "import ActorPropertyManager from \"../property/ActorPropertyManager\";\r\nimport ActorBase from \"./ActorBase\";\r\nimport StateMachine from \"../core/StateMachine\";\r\nimport { ActorType, ActorCamp } from \"./ActorType\";\r\nimport DisplayObjectController from \"./DisplayObjectController\";\r\nimport State from \"../core/State\";\r\nimport { ActorPropertyType } from \"../property/ActorPropertyType\";\r\nimport DataFactory from \"../data/DataFactory\";\r\n\r\nexport default class Actor extends ActorBase {\r\n    protected _displayObjectController: DisplayObjectController;\r\n    public get displayObjectController(): DisplayObjectController {\r\n        return this._displayObjectController;\r\n    }\r\n\r\n    protected _stateMachine: StateMachine;\r\n    public get stateMachine(): StateMachine {\r\n        return this._stateMachine;\r\n    }\r\n\r\n    protected _propertyManager: ActorPropertyManager;\r\n    public get propertyManager() {\r\n        return this._propertyManager;\r\n    }\r\n\r\n    constructor(templateId: number, type: ActorType, camp: ActorCamp) {\r\n        super(templateId, type, camp);\r\n        this.registerStates();\r\n        this.registerActions();\r\n        this.initProperty();\r\n        this._displayObjectController = new DisplayObjectController(this);\r\n    }\r\n\r\n    registerStates(): void {\r\n        this._stateMachine = new StateMachine(this);\r\n    }\r\n\r\n    protected _actionMap: Map<string, number> = new Map();\r\n    public get actionMap(): Map<string, number> {\r\n        return this._actionMap;\r\n    }\r\n    registerActions():void{\r\n        let res = DataFactory.getActionData(this._templateId);\r\n        res.forEach((action)=>{\r\n            this._actionMap.set(action.name, action.actionId)\r\n        })\r\n        \r\n    }\r\n\r\n    initProperty(): void {\r\n        this._propertyManager = new ActorPropertyManager(this);\r\n        this._propertyManager.setBaseProperty(ActorPropertyType.HP, this._templateData.hp);\r\n        this._propertyManager.setBaseProperty(ActorPropertyType.Atk, this._templateData.atk);\r\n    }\r\n\r\n    changeState(stateKey: string, obj: Object = null): void {\r\n        if (this._stateMachine) {\r\n            this._stateMachine.changeState(stateKey, obj)\r\n        }\r\n    }\r\n\r\n    moveTo(position: Laya.Point) {\r\n        if (this._displayObjectController) {\r\n            this._displayObjectController.moveTo(position);\r\n        }\r\n    }\r\n\r\n    update() {\r\n        if (this._displayObjectController) {\r\n            this._displayObjectController.update();\r\n        }\r\n    }\r\n}", "export default class State {\r\n\r\n    protected _owner: Object;\r\n    public get owner(): Object {\r\n        return this._owner;\r\n    }\r\n\r\n    constructor(owner:object){\r\n        this._owner = owner;\r\n    }\r\n\r\n    onEnter(obj: Object): void {\r\n\r\n    }\r\n\r\n    onLeave(newState: string): void {\r\n\r\n    }\r\n\r\n    getStateKey(): string {\r\n        return \"\";\r\n    }\r\n\r\n    onUpdate(): void {\r\n\r\n    }\r\n}", "import State from \"../../core/State\";\r\nimport Actor from \"../Actor\";\r\n\r\nexport default class ActorStateBase extends State{\r\n    protected _actor: Actor\r\n    constructor(owner: Object){\r\n        super(owner);\r\n        this._actor = owner as Actor;\r\n    }\r\n\r\n    onEnter(obj: Object): void {\r\n        if (this._actor&&this._actor.displayObjectController.is3dObjLoaded){\r\n            // this._actor.displayObjectController.animationController.playAni();\r\n        }\r\n    }\r\n\r\n    onLeave(newState: string): void {\r\n        \r\n    }\r\n\r\n    getStateKey(): string {\r\n        return \"\";\r\n    }\r\n\r\n    onUpdate(): void {\r\n        \r\n    }\r\n}", "import ActorStateBase from \"./ActorStateBase\";\r\n\r\nexport default class ActorIdleState extends ActorStateBase{\r\n    constructor(owner:Object){\r\n        super(owner);\r\n    }\r\n\r\n    onEnter(obj: Object = null): void {\r\n        super.onEnter(obj);\r\n        if(this._actor&&this._actor.displayObjectController.is3dObjLoaded){\r\n            this._actor.displayObjectController.animationController.playAni(\"daiji\");\r\n        }\r\n    }\r\n}", "import ActorStateBase from \"./ActorStateBase\";\r\n\r\nexport default class ActorMoveState extends ActorStateBase{\r\n    constructor(owner:Object){\r\n        super(owner);\r\n    }\r\n\r\n    onEnter(obj: Object = null): void {\r\n        super.onEnter(obj);\r\n        if(this._actor&&this._actor.displayObjectController.is3dObjLoaded){\r\n            this._actor.displayObjectController.animationController.playAni(\"paobu\");\r\n        }\r\n    }\r\n}", "import { ActorState } from \"../../Enum\";\r\nimport ActorStateBase from \"./ActorStateBase\";\r\n\r\nexport default class ActorSkillState extends ActorStateBase{\r\n    constructor(owner:Object){\r\n        super(owner);\r\n    }\r\n\r\n    onEnter(obj: Object = null): void {\r\n        super.onEnter(obj);\r\n        if(this._actor&&this._actor.displayObjectController.is3dObjLoaded){\r\n            this._actor.displayObjectController.animationController.playAni(\"jineng\",false,Laya.Handler.create(this,this.onAniFinish));\r\n        }\r\n    }\r\n\r\n    private keyFrameHandler():void{\r\n        // todo\r\n    }\r\n\r\n    private onAniFinish():void{\r\n        this._actor.changeState(ActorState.IDLE);\r\n    }\r\n}", "import { ActorCamp, ActorType } from \"./ActorType\";\r\nimport Actor from \"./Actor\";\r\nimport State from \"../core/State\";\r\nimport { ActorState } from \"../Enum\";\r\nimport ActorIdleState from \"./state/ActorIdleState\";\r\nimport ActorMoveState from \"./state/ActorMoveState\";\r\nimport ActorSkillState from \"./state/ActorSkillState\";\r\n\r\nexport default class Player extends Actor {\r\n\r\n    private static _ins: Player;\r\n    public static get ins(): Player {\r\n        if (this._ins == null) {\r\n            this._ins = new Player(1000,ActorType.PLAYER, ActorCamp.PLAYER);\r\n        }\r\n        return this._ins;\r\n    }\r\n\r\n    private constructor(templateId:number,type: ActorType, camp: ActorCamp) {\r\n        super(templateId,type, camp);\r\n        if (Player._ins) {\r\n            throw \"singleton class is not use new constructor!\";\r\n        }\r\n    }\r\n\r\n    registerStates(){\r\n        super.registerStates();\r\n        this.stateMachine.registerState(ActorState.IDLE, new ActorIdleState(this))\r\n        this.stateMachine.registerState(ActorState.Move, new ActorMoveState(this))\r\n        this.stateMachine.registerState(ActorState.SKILL, new ActorSkillState(this))\r\n    }\r\n}", "import Player from \"./actor/Player\";\r\nimport { ActorState } from \"./Enum\";\r\nimport SceneManager from \"./scene/SceneManager\";\r\n\r\nexport default class InputManager {\r\n    private static _ins: InputManager;\r\n    public static get ins(): InputManager {\r\n        if (this._ins == null) {\r\n            this._ins = new InputManager();\r\n        }\r\n        return this._ins;\r\n    }\r\n\r\n    private constructor() {\r\n        if (InputManager._ins) {\r\n            throw \"singleton class is not use new constructor!\";\r\n        }\r\n    }\r\n\r\n    public init() {\r\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseHandler);\r\n        Laya.stage.on(Laya.Event.KEY_DOWN, this, this.onKeyDown);\r\n    }\r\n\r\n    private mouseHandler(e:Laya.Event) {\r\n        let pos: Laya.Point = SceneManager.ins.getMousePos();\r\n        Player.ins.moveTo(pos);\r\n    }\r\n\r\n    private onKeyDown(e: Laya.Event){\r\n        // console.log(e);\r\n        if(e.keyCode == 81){ //Q\r\n            Player.ins.changeState(ActorState.Move);\r\n        }else if(e.keyCode == 87){\r\n            Player.ins.changeState(ActorState.SKILL);\r\n        }\r\n    }\r\n}", "import { ActorState, LayerEnum } from \"./Enum\";\r\nimport InputManager from \"./InputManager\";\r\nimport Player from \"./actor/Player\";\r\nimport SceneManager from \"./scene/SceneManager\";\r\nimport WorldMap from \"./scene/WorldMap\";\r\nimport { ActorPropertyType } from \"./property/ActorPropertyType\";\r\n\r\nexport default class App{\r\n    constructor(){\r\n        this.init()\r\n    }\r\n\r\n    init(){\r\n        SceneManager.ins.init();\r\n        SceneManager.ins.addToLayer(WorldMap.ins.container, LayerEnum.MapLayer);\r\n        SceneManager.ins.addToLayer(Player.ins.displayObjectController.displayObject, LayerEnum.ActorLayer,1024,1024);\r\n\r\n        SceneManager.ins.camera2d.focus(Player.ins.displayObjectController.displayObject);\r\n        InputManager.ins.init();\r\n        Player.ins.changeState(ActorState.IDLE);\r\n\r\n        Laya.timer.frameLoop(1,this,this.update);\r\n\r\n    }\r\n\r\n    update(){\r\n        SceneManager.ins.update();\r\n        Player.ins.update();\r\n    }\r\n}", "import App from \"./App\";\r\nimport GameConfig from \"./GameConfig\";\r\nclass Main {\r\n\tconstructor() {\r\n\t\tlet config3D = new Config3D();\r\n\t\tconfig3D.isAlpha = true;\r\n\t\t//\u6839\u636EIDE\u8BBE\u7F6E\u521D\u59CB\u5316\u5F15\u64CE\t\t\r\n\t\tif (window[\"Laya3D\"]) Laya3D.init(GameConfig.width, GameConfig.height);\r\n\t\telse Laya.init(GameConfig.width, GameConfig.height, Laya[\"WebGL\"]);\r\n\r\n\t\tLaya[\"Physics\"] && Laya[\"Physics\"].enable();\r\n\t\tLaya[\"DebugPanel\"] && Laya[\"DebugPanel\"].enable();\r\n\t\tLaya.stage.scaleMode = GameConfig.scaleMode;\r\n\t\tLaya.stage.screenMode = GameConfig.screenMode;\r\n\t\tLaya.stage.alignV = GameConfig.alignV;\r\n\t\tLaya.stage.alignH = GameConfig.alignH;\r\n\t\tLaya.stage.bgColor = null;\r\n\t\t//\u517C\u5BB9\u5FAE\u4FE1\u4E0D\u652F\u6301\u52A0\u8F7Dscene\u540E\u7F00\u573A\u666F\r\n\t\tLaya.URL.exportSceneToJson = GameConfig.exportSceneToJson;\r\n\r\n\t\t//\u6253\u5F00\u8C03\u8BD5\u9762\u677F\uFF08\u901A\u8FC7IDE\u8BBE\u7F6E\u8C03\u8BD5\u6A21\u5F0F\uFF0C\u6216\u8005url\u5730\u5740\u589E\u52A0debug=true\u53C2\u6570\uFF0C\u5747\u53EF\u6253\u5F00\u8C03\u8BD5\u9762\u677F\uFF09\r\n\t\tif (GameConfig.debug || Laya.Utils.getQueryString(\"debug\") == \"true\") Laya.enableDebugPanel();\r\n\t\tif (GameConfig.physicsDebug && Laya[\"PhysicsDebugDraw\"]) Laya[\"PhysicsDebugDraw\"].enable();\r\n\t\tif (GameConfig.stat) Laya.Stat.show();\r\n\t\tLaya.alertGlobalError(true);\r\n\r\n\t\t//\u6FC0\u6D3B\u8D44\u6E90\u7248\u672C\u63A7\u5236\uFF0Cversion.json\u7531IDE\u53D1\u5E03\u529F\u80FD\u81EA\u52A8\u751F\u6210\uFF0C\u5982\u679C\u6CA1\u6709\u4E5F\u4E0D\u5F71\u54CD\u540E\u7EED\u6D41\u7A0B\r\n\t\tLaya.ResourceVersion.enable(\"version.json\", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);\r\n\t}\r\n\r\n\tonVersionLoaded(): void {\r\n\t\t//\u6FC0\u6D3B\u5927\u5C0F\u56FE\u6620\u5C04\uFF0C\u52A0\u8F7D\u5C0F\u56FE\u7684\u65F6\u5019\uFF0C\u5982\u679C\u53D1\u73B0\u5C0F\u56FE\u5728\u5927\u56FE\u5408\u96C6\u91CC\u9762\uFF0C\u5219\u4F18\u5148\u52A0\u8F7D\u5927\u56FE\u5408\u96C6\uFF0C\u800C\u4E0D\u662F\u5C0F\u56FE\r\n\t\tLaya.AtlasInfoManager.enable(\"fileconfig.json\", Laya.Handler.create(this, this.onConfigLoaded));\r\n\t}\r\n\r\n\tonConfigLoaded(): void {\r\n\t\t//\u52A0\u8F7DIDE\u6307\u5B9A\u7684\u573A\u666F\r\n\t\t// GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);\r\n\t\tnew App();\r\n\t}\r\n}\r\n//\u6FC0\u6D3B\u542F\u52A8\u7C7B\r\nnew Main();\r\n"],
  "mappings": "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",
  "names": []
}
